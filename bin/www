#!/usr/bin/env node

const MyApp = require("../app");
const debug = require("debug")("auth-system:server");
const http = require("http");
const db = require("../models");

class MyServer {
  constructor() {
    this.app = new MyApp().app;
    this.setupDatabase();
    this.createServer();
    this.listen();
  }

  setupDatabase() {
    db.sequelize
      .sync()
      .then(() => {
        console.log("Connected to database successfully");
      })
      .catch((e) => {
        console.log(e);
        console.log("Failed to connect to database");
      });
  }

  createServer() {
    const port = this.normalizePort(process.env.PORT || "3000");
    this.app.set("port", port);
    this.server = http.createServer(this.app);
  }

  normalizePort(val) {
    const port = parseInt(val, 10);
    if (isNaN(port)) {
      return val;
    }
    if (port >= 0) {
      return port;
    }
    return false;
  }

  listen() {
    this.server.listen(this.app.get("port"));
    this.server.on("error", this.onError.bind(this));
    this.server.on("listening", this.onListening.bind(this));
  }

  onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    const bind =
      typeof this.app.get("port") === "string"
        ? "Pipe " + this.app.get("port")
        : "Port " + this.app.get("port");

    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  onListening() {
    const addr = this.server.address();
    const bind =
      typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
  }
}

new MyServer();
